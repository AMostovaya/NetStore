package cloud_netstore.server;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ServerMainForm extends JFrame {

    private ProtoServer protocolServer;
    private Path path;
    private Object object = null;
    private ProtoFileSender protocolFileSender;

    public ServerMainForm() {
        protocolServer = new ProtoServer();
        protocolFileSender = new ProtoFileSender();

        butRun.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    protocolServer.run();
                    protocolServer.initialize();
                    setTextAreaMessages("Сервер запущен");
                    // получаем список файлов сервера
                    getFileList();
                } catch (Exception ex) {
                    setTextAreaMessages("Ошибка запуска сервера");
                }
            }
        });

        butStop.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    protocolServer.stop();
                    setTextAreaMessages(" Сервер остановлен!");

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });
        jList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int result = jList.getSelectedIndex();
                if (result >= 0) {
                    // получаем выбранный файл
                    object = jList.getModel().getElementAt(result);
                }
            }
        });

        butSend.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                try {
                    protocolFileSender.sendFile(Paths.get("server_storage", "1.txt"), Network.getInstance().getCurrentChannel(), future -> {
                    if (!future.isSuccess()) {
                       future.cause().printStackTrace();
                    }
                    if (future.isSuccess()) {
                       System.out.println("Файл успешно передан");
                       Network.getInstance().stop();
                    }
                    });
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }

    public JPanel getPanelMain() {

        return PanelMain;
    }

    public void setTextAreaMessages(String text) {

        this.textAreaMessages.append(new SimpleDateFormat("hh:mm:ss").format(new Date()) + " " + text + "\n");

    }

    private void getFileList() {
        // инициализируем список для JList
        DefaultListModel defaultListModel = new DefaultListModel();

        // получаем путь к серверной папке хранения файлов
        path = Paths.get("./server_storage");
        File dir = new File(String.valueOf(path)); //path указывает на директорию
        // получаем список файлов
        File[] arrFiles = dir.listFiles();
        // добавляем пути файлов в список на форме
        for (int i = 0; i < arrFiles.length; i++) {
            defaultListModel.addElement(arrFiles[i]);
        }
        // выводим список файлов на форму
        jList.setModel(defaultListModel);

        jList.setFocusable(false);
    }


    private JButton butRun;
    private JPanel PanelMain;
    private JButton butStop;
    private JList jList;
    private JPanel ListPane;
    private JTextArea textAreaMessages;
    private JButton butSend;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        PanelMain = new JPanel();
        PanelMain.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        PanelMain.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        ListPane = new JPanel();
        ListPane.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        PanelMain.add(ListPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ListPane.setBorder(BorderFactory.createTitledBorder("File list"));
        jList = new JList();
        ListPane.add(jList, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        ListPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Events:"));
        textAreaMessages = new JTextArea();
        textAreaMessages.setLineWrap(true);
        panel1.add(textAreaMessages, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FormLayout("fill:d:grow,left:4dlu:noGrow,fill:d:grow", "center:d:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        ListPane.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), "Commands"));
        butRun = new JButton();
        Font butRunFont = this.$$$getFont$$$(null, Font.BOLD, 16, butRun.getFont());
        if (butRunFont != null) butRun.setFont(butRunFont);
        butRun.setForeground(new Color(-14286606));
        butRun.setText("Run");
        CellConstraints cc = new CellConstraints();
        panel2.add(butRun, cc.xy(1, 1));
        butStop = new JButton();
        Font butStopFont = this.$$$getFont$$$(null, Font.BOLD, 16, butStop.getFont());
        if (butStopFont != null) butStop.setFont(butStopFont);
        butStop.setForeground(new Color(-65536));
        butStop.setText("Stop");
        panel2.add(butStop, cc.xy(3, 1));
        butSend = new JButton();
        Font butSendFont = this.$$$getFont$$$(null, Font.BOLD, 16, butSend.getFont());
        if (butSendFont != null) butSend.setFont(butSendFont);
        butSend.setForeground(new Color(-16387535));
        butSend.setText("Send");
        panel2.add(butSend, cc.xy(1, 3));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return PanelMain;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }


}
