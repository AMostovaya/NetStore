package com.amostovaya.netstore.client;

import com.amostovaya.netstore.common.ProtoFileSender;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.io.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.CountDownLatch;

public class ClientMainForm extends JFrame {
    private JPanel MainPane;
    private JButton butStart;
    private JButton butStop;
    private JButton butSendFile;
    private JTextField textLogin;
    private JTextField textPass;
    private JTextField textFileName;
    private JTextArea textAreaMessages;
    private JButton butReceive;
    private JTextField textField2;

    private ClientHandler clientHandler;
    private Thread readerThread;

    public ClientMainForm() {

        butStart.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                CountDownLatch networkStarter = new CountDownLatch(1);
                new Thread(() -> Network.getInstance().start(networkStarter)).start();
                try {
                    networkStarter.await();
                    setTextAreaMessages("Подключение выполнено!");
                } catch (InterruptedException ex) {
                    ex.printStackTrace();

                }
            }
        });

        butSendFile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.showOpenDialog(getMainPane());
                File file = fileChooser.getSelectedFile();
                Path path = Paths.get(file.getPath());
                setTextAreaMessages("File selected: " + file.getName());
                // отправляем файл
                try {
                    ProtoFileSender.sendFile(path, Network.getInstance().getCurrentChannel(), future -> {
                        if (!future.isSuccess()) {
                            future.cause().printStackTrace();
                        }
                        if (future.isSuccess()) {
                            setTextAreaMessages("Файл передан на сервер");
                        }
                    });
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });

        butStop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Network.getInstance().stop();
                setTextAreaMessages("Disconnected");
            }
        });

        butReceive.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                try {
                    String p = "//server_storage/" + textFileName.getText();
                    ProtoFileSender.receiveFile(Paths.get(p), Network.getInstance().getCurrentChannel(), future -> {
                        if (!future.isSuccess()) {
                            future.cause().printStackTrace();
                        }
                        if (future.isSuccess()) {
                            setTextAreaMessages("Получен файл с сервера");
                        }
                    });
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });

    }

    public JPanel getMainPane() {
        return MainPane;
    }

    public void setTextAreaMessages(String textAreaMessages) {
        this.textAreaMessages.append(new SimpleDateFormat("hh:mm:ss").format(new Date()) + " " + textAreaMessages + "\n");
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainPane = new JPanel();
        MainPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        MainPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(22, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Authorization"));
        final JLabel label1 = new JLabel();
        label1.setText("Password:");
        panel2.add(label1, new GridConstraints(0, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Server adress:");
        panel2.add(label2, new GridConstraints(0, 2, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Login:");
        panel2.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        textLogin = new JTextField();
        textLogin.setMargin(new Insets(2, 5, 2, 5));
        textLogin.setMinimumSize(new Dimension(64, 24));
        textLogin.setPreferredSize(new Dimension(50, 28));
        textLogin.setText("");
        panel2.add(textLogin, new GridConstraints(1, 0, 21, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        textFileName = new JTextField();
        textFileName.setPreferredSize(new Dimension(64, 28));
        panel2.add(textFileName, new GridConstraints(2, 1, 20, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        butStart = new JButton();
        butStart.setText("Connect");
        panel2.add(butStart, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        butStop = new JButton();
        butStop.setText("Disconnect");
        panel2.add(butStop, new GridConstraints(5, 2, 5, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        textPass = new JTextField();
        textPass.setPreferredSize(new Dimension(64, 28));
        panel2.add(textPass, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        textField2 = new JTextField();
        panel2.add(textField2, new GridConstraints(10, 2, 11, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        butSendFile = new JButton();
        butSendFile.setText("Send");
        panel1.add(butSendFile, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        textAreaMessages = new JTextArea();
        panel1.add(textAreaMessages, new GridConstraints(1, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        butReceive = new JButton();
        butReceive.setText("Receive");
        panel1.add(butReceive, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        label3.setLabelFor(textLogin);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPane;
    }

}
